import json
import pathlib
import typing
import subprocess
import shlex
import random
import typer


class AssumptionError(Exception):
    pass


def bisect_env(
        failing_env: typing.Mapping[str, str],
        passing_env: typing.Mapping[str, str],
        command: list[str],
        seed: int,
        retries: int,
        show_cmd_output: bool,
        show_progress: bool ,
) -> tuple[dict[str, str], dict[str, str]]:

    def test(env: typing.Mapping[str, str]) -> bool:
        if show_cmd_output:
            print(shlex.join(command))
        result = subprocess.run(command, env=env, check=False, capture_output=not show_cmd_output)
        return result.returncode == 0

    if test(failing_env):
        raise AssumptionError("Command should fail in failing_env, but it passed.")

    if not test(passing_env):
        raise AssumptionError("Command should pass in passing_env, but it failed.")

    rng = random.Random(seed)

    def bisect_env_helper(
            failing_env: dict[str, str],
    ) -> dict[str, str]:
        if not (passing_env.keys() <= failing_env.keys()):
            raise AssumptionError("Passing env should have a subset of keys of failing env")
        different_keys = sorted(
            key
            for key in failing_env.keys()
            if passing_env.get(key) != failing_env[key]
        )
        if show_progress:
            print(" ".join(different_keys))
        if len(different_keys) == 0:
            raise AssumptionError("No difference between passing_env and failing_env")
        elif len(different_keys) == 1:
            return failing_env
        else:
            mid = len(different_keys) // 2
            if show_progress:
                print(f"{len(passing_env)} kv pairs in passing_env, {len(failing_env)} kv pairs in failing_env, {len(different_keys)} kv differences, trying to cut differences to {mid}")
            rng.shuffle(different_keys)
            left_half = different_keys[:mid]
            right_half = different_keys[mid:]
            left_candidate = {**passing_env, **{key: failing_env[key] for key in left_half}}
            right_candidate = {**passing_env, **{key: failing_env[key] for key in right_half}}
            if not test(left_candidate):
                if show_progress:
                    print("Left-half of failing env still fails")
                return bisect_env_helper(left_candidate)
            elif not test(right_candidate):
                if show_progress:
                    print("Right-half of failing env still fails")
                return bisect_env_helper(right_candidate)
            else:
                if show_progress:
                    print("Neither right nor left of failing env fails; switching to linear ablation")
                return linear_ablation(failing_env)

    def linear_ablation(
            failing_env: dict[str, str],
    ) -> dict[str, str]:
        different_keys = sorted(
            key
            for key in failing_env.keys()
            if passing_env.get(key) != failing_env[key]
        )
        if show_progress:
            print(f"{len(passing_env)} kv pairs in passing_env, {len(failing_env)} kv pairs in failing_env, {len(different_keys)} kv differences, trying to leave out each difference individually")
        for leave_out_key in different_keys:
            candidate = {**passing_env, **{key: failing_env[key] for key in different_keys if key != leave_out_key}}
            if not test(candidate):
                if show_progress:
                    print(f"Failing env failed even leaving out {leave_out_key}")
                return linear_ablation(candidate)
        if show_progress:
            print("No single can be removed from failing env without causing success")
        return failing_env

    return bisect_env_helper(dict(failing_env)), dict(passing_env)



def main(
        failing_env_json: pathlib.Path,
        passing_env_json: pathlib.Path,
        command: list[str],
        seed: int = 0,
        retries: int = 10,
        show_cmd_output: bool = False,
        show_progress: bool = True,
) -> None:
    failing_env = json.loads(failing_env_json.read_text())
    passing_env = json.loads(passing_env_json.read_text())
    new_failing, new_passing = bisect_env(
        failing_env,
        passing_env,
        command,
        seed=seed,
        retries=retries,
        show_cmd_output=show_cmd_output,
        show_progress=show_progress,
    )
    print("Minimized failing env:")
    for key, val in new_failing.items():
        print(f"{key}={val}")
    print(json.dumps(new_failing))


if __name__ == "__main__":
    typer.run(main)
