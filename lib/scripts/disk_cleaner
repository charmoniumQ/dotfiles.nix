#!/usr/bin/env bash

set -ueo pipefail

# function real_du() {
#     sudo du --summarize --human-readable $1
# }

function real_du() {
    sudo gdu --summarize --non-interactive "$1" | choose 0 1
}

function sampling_du() {
    local sampling_ratio=$1
    local depth=$2
    local path=$3

    local population
    population="$(mktemp)"
    # shellcheck disable=SC2024
    sudo fd --exact-depth "$depth" . "$path" > "$population"

    local length
    length="$(wc --lines "$population")"
    local sample_size
    sample_size="$(python -c "print($length * $sampling_ratio)")"

    # shellcheck disable=SC2016
    shuf "$population" \
        | head "--lines=$sample_size" \
        | xargs --max-args=1 gdu --non-interactive --summarize \
        | choose 0 1 \
        | xargs --max-args=2 sh -c 'bitmath "$0" -f "$1" -t Byte' \
        | choose 0 \
        | paste --serial '--delimiters=+' - \
        | bc \
        | bitmath --from-stdin -f Byte
}

function p() {
    "$@" || (echo "Command failed:" "$@" && exit 1)
}

duf -only local

containers="$(p buildah containers --all)"
images="$(p buildah images --all)"
if [ -n "${containers}${images}" ]; then
    rich --rule "User buildah"
    echo "$containers"
    echo "$images"
    echo "Potentially freeing $(real_du "$(buildah info | jq '.store.GraphRoot' --raw-output)") +  $(real_du "$(buildah info | jq '.store.RunRoot' --raw-output)")"
    if gum confirm "prune all containers and all images including local?"; then
        p buildah prune --all --force
        # Assert length is 0
        p buildah images --all --json | jq --exit-status 'length == 0' > /dev/null || echo 'Some buildah images remain'
        p buildah ps --all --json | jq --exit-status 'length == 0' > /dev/null || echo 'Some buildah containers remain'
    fi
fi


containers="$(p sudo buildah containers --all)"
images="$(p sudo buildah images --all)"
if [ -n "${containers}${images}" ]; then
    rich --rule "Root buildah"
    echo "$containers"
    echo "$images"
    echo "Potentially freeing $(real_du "$(sudo buildah info | jq '.store.GraphRoot' --raw-output)") +  $(real_du "$(sudo buildah info | jq '.store.RunRoot' --raw-output)")"
    if gum confirm "prune all containers and all images including local?"; then
        p sudo buildah prune --all --force
        # Assert length is 0
        p sudo buildah images --all --json | jq --exit-status 'length == 0' > /dev/null || echo 'Some buildah images remain'
        p sudo buildah ps --all --json | jq --exit-status 'length == 0' > /dev/null || echo 'Some buildah containers remain'
    fi
fi

containers="$(p podman container list --all)"
images="$(p podman image list --all)"
networks="$(p podman network list)"
if [ -n "${containers}${images}${networks}" ]; then
    rich --rule "User podman"
    echo "${containers}"
    echo "${images}"
    echo "${networks}"
    echo "Potentially freeing $(real_du "$(podman system info | yq '.store.graphRoot' --raw-output)") + $(real_du "$(podman system info | yq '.store.runRoot' --raw-output)") + $(real_du "$(podman system info | yq '.store.volumePath' --raw-output)")"
    if gum confirm "delete all resources (containers, images, networks)"; then
        # Podman system prune does not clean up running containres
        p podman container stop --all

        # see https://unix.stackexchange.com/a/619702/59973
        # podman system prune --force || true
        p podman container rm --all --force
        p podman image rm --all --force

        # Assert done
        p podman image list --all --format=json | jq --exit-status 'length == 0' > /dev/null || echo 'Some podman images remain'
        p podman container list --all --format=json | jq --exit-status 'length == 0' > /dev/null || echo 'Some podman containers remaine'
    fi
fi

containers="$(p sudo podman container list --all)"
images="$(p sudo podman image list --all)"
networks="$(p sudo podman network list)"
if [ -n "${containers}${images}${networks}" ]; then
    rich --rule "Root podman"
    echo "${containers}"
    echo "${images}"
    echo "${networks}"
    echo "Potentially freeing $(real_du "$(sudo podman system info | yq '.store.graphRoot' --raw-output)") + $(real_du "$(sudo podman system info | yq '.store.runRoot' --raw-output)") + $(real_du "$(sudo podman system info | yq '.store.volumePath' --raw-output)")"
    if gum confirm "delete all resources (containers, images, networks)"; then
        # Podman system prune does not clean up running containers
        p sudo podman container stop --all

        # see https://unix.stackexchange.com/a/619702/59973
        # sudo podman system prune --force || true
        p sudo podman container rm --all --force
        p sudo podman image rm --all --force

        # Assert done
        p sudo podman image list --all --format=json | jq --exit-status 'length == 0' > /dev/null || echo 'Some podman images remain'
        p sudo podman container list --all --format=json | jq --exit-status 'length == 0' > /dev/null || echo 'Some podman containers remaine'
    fi
fi

containers="$(p docker container list --all)"
images="$(p docker image list --all)"
if [ -n "${containers}${images}${networks}" ]; then
    rich --rule "Docker"
    echo "${containers}"
    echo "${images}"
    if gum confirm "delete all resources (containers, images, networks)"; then
        # For whatever reason, docker system prune is not sufficient
        if docker container list --all --format=json | jq --exit-status 'length == 0' > /dev/null; then
            p docker stop "$(docker container list --all --quiet)"
        fi

        if docker image list --all --format=json | jq --exit-status 'length != 0' > /dev/null; then
            #p docker image rm "$(docker images --all --quiet)"
            p docker images --all --quiet | xargs --max-args 1 docker image rm
        fi
        p docker system prune --force
        p docker image list --all --format=json | jq --exit-status 'length == 0' > /dev/null || echo 'Some docker images remain'
        p docker container list --all --format=json | jq --exit-status 'length == 0' > /dev/null || echo 'Some docker containers remain'
    fi
fi

rich --rule "User Journald"
p journalctl --user --flush
p journalctl --user --disk-usage
if gum confirm "Retain past 100M of Journald"; then
    p journalctl --user --vacuum-size=100M
fi


rich --rule "Root Journald"
p sudo journalctl --flush --rotate
p sudo journalctl --disk-usage
if gum confirm "Retain past 100M of Journald"; then
    p sudo journalctl --vacuum-size=100M
fi

downloads="$(lsd "$HOME"/Downloads/)"
if [ -n "$downloads" ]; then
    rich --rule "Downloads"
    echo "$downloads"
    echo "Potentailly freeing $(real_du "$HOME/Downloads")"
    if gum confirm "Empty Downloads"; then
        p trash-put "$HOME/Downloads/"*
    fi
fi


dir="${XDG_CACHE_HOME:-$HOME/.cache}"
caches="$(lsd "$dir")"
if [ -n "$caches" ]; then
    rich --rule "XDG_CACHE_DIR"
    echo "$caches"
    echo "Potentailly freeing $(real_du "$dir")"
    if gum confirm "Empty Downloads"; then
        p trash-put "$dir"
        mkdir "$dir"
    fi
fi

flatpaks="$(p flatpak list --all)"
if [ -n "$flatpaks" ]; then
    p rich --rule "Flatpaks"
    echo "$flatpaks"
    echo "Potentailly freeing $(real_du "/var/lib/flatpak/")"
    if [ -n "$flatpaks" ] && gum confirm "Remove flatpaks"; then
        p flatpak list --all --columns=ref | xargs --max-args=1 flatpak uninstall --assumeyes
        p flatpak uninstall --unused --assumeyes
    fi
fi

rich --rule "Nix"
nix_store="$(nix config show --json | jq ".store.value" --raw-output)"
if [ "$nix_store" = "auto" ]; then
    nix_store=/nix/store
fi


if gum confirm "Nix wipe old generations?"; then
    p sudo nix profile wipe-history --profile /nix/var/nix/profiles/system
    p home-manager expire-generations '-1 days'
    p nix profile wipe-history
fi

direnvs="$(p find ~ -name '.direnv')"
delete_direnvs=$(gum filter --no-limit $direnvs)
if [ -n "$delete_direnvs" ]; then
     echo $delete_direnvs | xargs --max-args=1 trash-put
fi

echo "Potentially freeing $(sampling_du 0.01 1 "$nix_store")"
if gum confirm "Nix GC?"; then
    p nix-store --gc --print-roots | rg -v '^/proc/\d+'
    p nix store gc
fi

rich --rule "Doom"
if gum confirm "Doom sync, upgrade, gc?"; then
    p ~/.emacs.d/bin/doom sync
    p ~/.emacs.d/bin/doom upgrade
    p ~/.emacs.d/bin/doom gc
fi

trash_dir="${XDG_DATA_HOME:-$HOME/.local}/Trash"
trashes="$(lsd "$trash_dir")"
if [ -n "$trashes" ]; then
    rich --rule "Trash"
    echo "$trashes"
    echo "Potentailly freeing $(real_du )"
    if gum confirm "Empty trash"; then
        p trash-empty
    fi
fi

p duf -only local
